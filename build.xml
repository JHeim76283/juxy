<?xml version='1.0'?>
<project name="juxy" default="compile" basedir=".">

    <property name="src.dir" location="${basedir}/src"/>
    <property name="tests.dir" location="${basedir}/tests"/>
    <property name="classes.dir" location="${basedir}/classes"/>
    <property name="test.classes.dir" location="${basedir}/test-classes"/>
    <property name="lib.dir" location="${basedir}/lib"/>
    <property name="tools.dir" location="${basedir}/tools"/>
    <property name="depcache.dir" location="${basedir}/depcache"/>
    <property name="build.dir" location="${basedir}/build"/>

    <!-- emma coverage properties -->
    <property name="instr.classes.dir" location="${basedir}/instr-classes"/>
    <property name="coverage.report.dir" location="${basedir}/cvgreport"/>

    <property name="metrics.file" location="${basedir}/metrics.txt"/>

    <path id="compile.classpath">
        <pathelement path="${classes.dir}"/>
        <fileset dir="${lib.dir}" >
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${tools.dir}/junit.jar"/>
    </path>

    <path id="compile-tests.classpath">
        <path refid="compile.classpath"/>
        <pathelement path="${tools.dir}/ant-testutil.jar"/>
    </path>

    <path id="test.classpath">
        <pathelement path="${test.classes.dir}"/>
        <path refid="compile-tests.classpath"/>
    </path>

    <path id="instr.classpath">
        <pathelement path="${classes.dir}"/>
    </path>

    <path id="run-instr-tests.classpath">
        <pathelement location="${instr.classes.dir}/classes"/>
        <pathelement location="${test.classes.dir}"/>
        <fileset dir="${lib.dir}" >
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${tools.dir}/junit.jar"/>
        <path refid="emma.lib"/>
    </path>

    <target name="init">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${test.classes.dir}/META-INF"/>
    </target>

    <target name="clean" description="Cleans up all compiled classes">
        <delete dir="${classes.dir}" failonerror="false" />
        <delete dir="${depcache.dir}" failonerror="false"/>
        <delete dir="${instr.classes.dir}" failonerror="false"/>
        <delete dir="${test.classes.dir}" failonerror="false"/>
        <delete dir="${build.dir}" failonerror="false"/>
        <delete dir="${coverage.report.dir}" failonerror="false"/>
        <delete file="coverage.ec"/>
        <delete file="coverage.em"/>
    </target>

    <target name="compile-src" depends="init">
        <depend srcdir="${src.dir}" destdir="${classes.dir}" cache="${depcache.dir}" closure="no"/>

        <javac  srcdir="${src.dir}" destdir="${classes.dir}"
                includes="org/**"
                classpathref="compile.classpath"
                debug="true"
                source="1.4"
          />
    </target>

    <target name="compile-tests" depends="compile-src">
        <depend srcdir="${tests.dir}" destdir="${test.classes.dir}" cache="${depcache.dir}" closure="no"/>

        <javac  srcdir="${tests.dir}" destdir="${test.classes.dir}"
                includes="org/**"
                classpathref="compile-tests.classpath"
                debug="true"
                source="1.4"
        />

        <copy todir="${test.classes.dir}/META-INF">
            <fileset dir="${tests.dir}/META-INF">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="init, compile-src, compile-tests" />

    <target name="remake" depends="clean, test-all" description="Remakes all source codes and runs all tests"/>

    <fileset id="all.tests.except.verifier" dir="${tests.dir}">
        <include name="org/**/UTest*.java" />
        <exclude name="org/**/UTestVerifierTask.java" />
    </fileset>

    <fileset id="all.tests.except.xslt20.and.verifier" dir="${tests.dir}">
        <include name="org/**/UTest*.java" />
        <exclude name="org/**/UTest*20.java" />
        <exclude name="org/**/UTestVerifierTask.java" />
    </fileset>

    <fileset id="all.tests.for.java.xsltc" dir="${tests.dir}">
        <include name="org/**/UTest*.java" />
        <exclude name="org/**/UTest*20.java" />
        <exclude name="org/**/UTestExternalFunctions.java" />
        <exclude name="org/**/UTestRunnerTracing.java" />
        <exclude name="org/**/UTestTracingFilter.java" />
        <exclude name="org/**/UTestURIResolver.java" />
        <exclude name="org/**/UTestVerifierImpl.java" />
        <exclude name="org/**/UTestVerifierTask.java" />
    </fileset>

    <fileset id="all.tests.for.xalan.xsltc" dir="${tests.dir}">
        <include name="org/**/UTest*.java" />
        <exclude name="org/**/UTest*20.java" />
        <exclude name="org/**/UTestExternalFunctions.java" />
        <exclude name="org/**/UTestRunnerTracing.java" />
        <exclude name="org/**/UTestTracingFilter.java" />
        <exclude name="org/**/UTestVerifierImpl.java" />
        <exclude name="org/**/UTestVerifierTask.java" />
    </fileset>

    <fileset id="verifier.task.tests" dir="${tests.dir}">
        <include name="org/**/UTestVerifierTask.java" />
    </fileset>

    <path id="verifiertask.test.classpath">
        <fileset dir="${lib.dir}">
            <include name="saxon*.jar"/>
        </fileset>
        <pathelement path="${test.classes.dir}"/>
        <pathelement path="${tools.dir}/ant-testutil.jar"/>
    </path>

    <target name="test-verifiertask">
        <antcall target="ut">
            <param name="files" value="verifier.task.tests"/>
            <param name="transformerFactory" value="net.sf.saxon.TransformerFactoryImpl"/>
            <param name="classpath" value="verifiertask.test.classpath"/>
        </antcall>
    </target>

    <target name="test-all" depends="compile" description="Runs all tests under the Xalan and Saxon engines" >
        <echo message="Running tests against Java 1.5 XSLTC ..."/>
        <!-- run unit tests with Java 1.5 xalan XSLTC -->
        <antcall target="ut">
            <param name="files" value="all.tests.for.java.xsltc"/>
            <param name="transformerFactory" value="com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl"/>
            <param name="classpath" value="test.classpath"/>
        </antcall>

        <echo message="Running tests against Xalan XSLTC ..."/>
        <!-- run unit tests with xalan XSLTC -->
        <antcall target="ut">
            <param name="files" value="all.tests.for.xalan.xsltc"/>
            <param name="transformerFactory" value="org.apache.xalan.xsltc.trax.TransformerFactoryImpl"/>
            <param name="classpath" value="test.classpath"/>
        </antcall>

        <echo message="Running tests against Xalan XSLT ..."/>
        <!-- run unit tests with xalan -->
        <antcall target="ut">
            <param name="files" value="all.tests.except.xslt20.and.verifier"/>
            <param name="transformerFactory" value="org.apache.xalan.processor.TransformerFactoryImpl"/>
            <param name="classpath" value="test.classpath"/>
        </antcall>

        <echo message="Running tests against Saxon XSLT ..."/>
        <!-- run unit tests with saxon -->
        <antcall target="ut">
            <param name="files" value="all.tests.except.verifier"/>
            <param name="transformerFactory" value="net.sf.saxon.TransformerFactoryImpl"/>
            <param name="classpath" value="test.classpath"/>
        </antcall>
        <!-- run unit tests for veriier task -->
        <antcall target="test-verifiertask"/>
    </target>

    <target name="verify-samples" description="Runs samples" >
        <ant dir="${basedir}" antfile="samples-build.xml" target="run-samples" inheritall="false" inheritrefs="false" />
    </target>

    <target name="ut">
        <junit printsummary="yes" haltonfailure="yes" fork="no" showoutput="false" reloading="false" >
            <jvmarg line="-ea"/>
            <sysproperty key="javax.xml.transform.TransformerFactory" value="${transformerFactory}"/>
            <classpath refid="${classpath}" />
            <formatter type="plain" usefile="false"/>
            <batchtest fork="no">
                <fileset refid="${files}"/>
            </batchtest>
        </junit>
    </target>

    <target name="build" description="Creates Juxy build" >
        <property file="${basedir}/build.properties"/>
        <copy file="${src.dir}/org/tigris/juxy/Version.tpl" tofile="${src.dir}/org/tigris/juxy/Version.java"/>
        <replace file="${src.dir}/org/tigris/juxy/Version.java" token="@@version" value="${version}"/>

        <antcall target="clean"/>
        <antcall target="test-all"/>
        <antcall target="verify-samples"/>

        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/lib"/>

        <mkdir dir="${build.dir}/doc"/>
        <copy file="${basedir}/www/index.html" todir="${build.dir}/doc" />

        <antcall target="doc">
            <param name="doc.dir" location="${build.dir}/doc/javadoc"/>
        </antcall>

        <copy file="${basedir}/samples-build.xml" tofile="${build.dir}/build.xml" />
        <copy todir="${build.dir}/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
                <exclude name="saxon*.jar"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${basedir}">
                <include name="samples/**"/>
                <include name="License.txt"/>
                <include name="CatalogManager.properties"/>
                <include name="samples.catalog"/>
            </fileset>
        </copy>

        <jar destfile="${build.dir}/juxy.jar" basedir="${classes.dir}" includes="org/**" excludes="org/**/verifier/**">
            <manifest>
                <attribute name="Version" value="${version}"/>
            </manifest>
        </jar>

        <jar destfile="${build.dir}/juxy_ant.jar">
            <manifest>
                <attribute name="Version" value="${version}"/>
            </manifest>

            <fileset dir="${classes.dir}" includes="org/**/verifier/**"/>
            <fileset dir="${classes.dir}" includes="org/tigris/juxy/util/SAXUtil.class, org/tigris/juxy/util/FileURIResolver.class, org/tigris/juxy/util/ExceptionUtil.class"/>
            <fileset dir="${classes.dir}" includes="org/tigris/juxy/XSLTKeys.class, org/tigris/juxy/JuxyRuntimeException.class"/>
            <fileset dir="${basedir}" includes="juxy_ant.properties"/>
        </jar>

        <zip file="juxy-${version}.zip">
            <fileset dir="${build.dir}">
                <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <target name="doc" depends="init" description="Creates javadoc, specify -Ddoc.dir for javadoc directory">
        <condition property="doc.dir" value="${basedir}/apidocs" >
            <not><isset property="doc.dir"/></not>
        </condition>

        <mkdir dir="${doc.dir}"/>

        <property file="${basedir}/api-files.properties"/>

        <javadoc sourcefiles="${api-files}"
                    destdir="${doc.dir}"
                    packagenames="org.tigris.juxy.*"
                    windowtitle="Juxy - XSLT unit testing from Java"
                    package="true" >
            <classpath refid="compile.classpath" />
        </javadoc>
    </target>


    <!-- ================================================== -->
    <!-- generates project metrics                          -->
    <!-- ================================================== -->
    <target name="metrics" description="generates metrics for the project">

        <taskdef name="javancss" classname="javancss.JavancssAntTask">
            <classpath>
                 <pathelement location="${tools.dir}/javancss.jar"/>
                 <pathelement location="${tools.dir}/ccl.jar"/>
                 <pathelement location="${tools.dir}/jhbasic.jar"/>
            </classpath>
        </taskdef>

       <javancss srcdir="${src.dir}" includes="**/*.java/"
                generateReport="true"
                outputfile="${metrics.file}"
                format="plain"/>
    </target>


    <path id="emma.lib" >
        <pathelement location="${tools.dir}/emma.jar" />
        <pathelement location="${tools.dir}/emma_ant.jar" />
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

    <target name="init-coverage" depends="clean" >
        <mkdir dir="${coverage.report.dir}"/>
        <mkdir dir="${instr.classes.dir}"/>
    </target>

    <target name="coverage-ut">
        <junit printsummary="yes" haltonfailure="yes" fork="no" showoutput="yes">
            <jvmarg line="-ea"/>
            <sysproperty key="javax.xml.transform.TransformerFactory" value="net.sf.saxon.TransformerFactoryImpl"/>
            <classpath refid="run-instr-tests.classpath" />
            <formatter type="plain" usefile="false"/>
            <batchtest fork="yes">
                <fileset refid="all.tests.except.verifier"/>
            </batchtest>
        </junit>
    </target>

    <target name="coverage-report">
        <emma enabled="true">
            <report sourcepath="${src.dir}" >
                <infileset dir="${basedir}" includes="*.em, *.ec" />
                <txt outfile="${coverage.report.dir}/coverage.txt" />
                <html outfile="${coverage.report.dir}/coverage.html" />
            </report>
        </emma>
    </target>

    <target name="coverage-instr">
        <emma enabled="true">
            <instr instrpathref="instr.classpath"
                    destdir="${instr.classes.dir}"
                    merge="no"
                    mode="fullcopy"/>
        </emma>
    </target>

    <target name="coverage" depends="init-coverage" description="Measures tests coverage">
        <antcall target="compile-tests"/>
        <antcall target="coverage-instr"/>
        <antcall target="coverage-ut"/>
        <antcall target="coverage-report"/>
    </target>

</project>
