import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.4

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'tests'
        }
        resources {
            srcDir 'tests'
        }
    }
}

configurations {
	testRuntimeFirst
    testRuntimeOracleXDK
    testRuntimeSaxon8
    testRuntimeSaxon9
}

dependencies {
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'jaxen:jaxen:1.1.1'
    compile 'junit:junit:4.10'
    compile 'xml-resolver:xml-resolver:1.2'
    compile 'org.apache.ant:ant-testutil:1.8.3'

    testRuntimeFirst files('tests/xml/resolver/resources.jar')

    testRuntime files('tests/xml/resolver/resources2.jar')
    testRuntime 'xalan:xalan:2.7.1'
    testRuntime 'xom:xom:1.2.5'
    testRuntime 'xerces:xercesImpl:2.10.0'

    testRuntimeSaxon8 'net.sf.saxon:saxon:8.7'
    testRuntimeSaxon8 'net.sf.saxon:saxon-dom:8.7'
    testRuntimeSaxon9 'net.sf.saxon:Saxon-HE:9.4'
    testRuntimeOracleXDK files('lib/xmlparserv2.jar')
}

// Some tests expect the resources.jar at the front of the classpath.
sourceSets.test.runtimeClasspath = configurations.testRuntimeFirst + sourceSets.test.runtimeClasspath

// Tests
// -----

task test(overwrite: true) {}
test.dependsOn {
    tasks.findAll { task -> task.name.startsWith('test') && task.name != 'test' }
}

task testDefaultTransformer(type: Test) {
    description = "Runs tests using the default TransformerFactory."
    excludes = ['**/UTestVerifier*']
}

task testApacheXalan(type: Test) {
    description = "Runs tests using Apache Xalan XSLT."
	systemProperty 'javax.xml.transform.TransformerFactory', 'org.apache.xalan.processor.TransformerFactoryImpl'
    excludes = ['**/UTestVerifier*']
}

/* There are test failures.
task testJavaXSLTC(type: Test) {
    description = "Runs tests using JRE XSLTC."
    systemProperty 'javax.xml.transform.TransformerFactory', 'com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl'
}
*/

task testApacheXalanXSLTC(type: Test) {
    description = "Runs tests using Apache Xalan XSLTC."
    systemProperty 'javax.xml.transform.TransformerFactory', 'org.apache.xalan.xsltc.trax.TransformerFactoryImpl'
    excludes = ['**/UTestVerifier*']
}

task testSaxon8(type: Test) {
    description = "Runs tests using Saxon."
    systemProperty 'javax.xml.transform.TransformerFactory', 'net.sf.saxon.TransformerFactoryImpl'
    classpath += configurations.testRuntimeSaxon8
    excludes = ['**/UTestVerifier*']
}

task testSaxon9HE(type: Test) {
    description = "Runs tests using Saxon 9 Home Edition."
    systemProperty 'javax.xml.transform.TransformerFactory', 'net.sf.saxon.TransformerFactoryImpl'
    classpath += configurations.testRuntimeSaxon9
    // The home edition does not support calling java methods from xslt.
    excludes = ['**/UTestVerifier*', '**/UTestExternalFunctions.class', '**/UTestRunnerTracing*', '**/UTestURIResolver.class']
}

task testOracleXDK(type: Test) {
    description = "Runs tests using Oracle XDK."
    systemProperty 'javax.xml.transform.TransformerFactory', 'oracle.xml.jaxp.JXSAXTransformerFactory'
    systemProperty 'javax.xml.parsers.DocumentBuilderFactory', 'oracle.xml.jaxp.JXDocumentBuilderFactory'
    systemProperty 'javax.xml.parsers.SAXParserFactory', 'oracle.xml.jaxp.JXSAXParserFactory'
    systemProperty 'org.xml.sax.driver', 'oracle.xml.jaxp.JXSAXParser'
    classpath += configurations.testRuntimeOracleXDK
    excludes = ['**/UTestVerifier*']
}

task testTestVerifier(type: Test) {
    includes = ['**/UTestVerifier*']
    classpath += configurations.testRuntimeSaxon8
}

// Stuff
// -----

// Generate Version.java containing the project version.
task generateVersionFile(type:Copy) {
	from('src') {
		include 'org/tigris/juxy/Version.tpl'
		filter(ReplaceTokens, tokens:[version:project.version])
		rename '(.*).tpl', '$1.java'
	}
	into('src')
    outputs.upToDateWhen { false }
}
compileJava.dependsOn generateVersionFile

// Generate gradlew.
task wrapper(type: Wrapper) {
    gradleVersion = '1.0-rc-3'
}

// Maven
// -----

// Deploy to maven repo.
if (project.hasProperty('uploadRepositoryUrl')) {
    uploadArchives {
        repositories.mavenDeployer {
            repository(url: uploadRepositoryUrl) {
                authentication(userName: uploadRepositoryUsername, password: uploadRepositoryPassword)
            }
            snapshotRepository(url: uploadSnapshotRepositoryUrl) {
                authentication(userName: uploadRepositoryUsername, password: uploadRepositoryPassword)
            }
        }
    }
}

// Also deploy source jar.
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives sourcesJar
}
