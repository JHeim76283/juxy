<?xml version="1.0" encoding="utf-8"?>
<!-- Stylesheet to convert XML into Juxy unit tests. -->
<!-- Author: Tony Graham -->
<!-- Copyright 2008 Menteith Consulting Ltd -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  exclude-result-prefixes="xsl xml"
                version="1.0">

  <xsl:output method="text"/>

  <xsl:strip-space
    elements="testcase test call-template assert-equals document expected actual"/>

  <xsl:template match="testcase">
    <xsl:if test="//@href">
      <xsl:text>import java.io.File;
</xsl:text>
    </xsl:if>
    <xsl:if test="//@catalog">
      <xsl:text>import org.apache.xml.resolver.CatalogManager;
import org.apache.xml.resolver.tools.CatalogResolver;
</xsl:text>
</xsl:if>
<xsl:text>import org.tigris.juxy.JuxyTestCase;
import org.tigris.juxy.util.DOMUtil;
import org.w3c.dom.Node;

/* This file is automatically generated. */
public class </xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text> extends JuxyTestCase {&#xA;</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>}&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="testcase/stylesheet">
    <xsl:text>  protected void setUp() throws Exception {&#xA;</xsl:text>
    <xsl:call-template name="stylesheet"/>
    <xsl:text>  }&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="stylesheet" name="stylesheet">
    <xsl:if test="@catalog">
      <xsl:text>    CatalogManager cm = CatalogManager.getStaticManager();&#xA;</xsl:text>
      <xsl:text>    cm.setCatalogFiles("</xsl:text>
      <xsl:value-of select="@catalog"/>
      <xsl:text>");&#xA;</xsl:text>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="@href and node()">
        <xsl:message terminate="yes">
          <xsl:value-of select="local-name()"/>
          <xsl:text> element should have either @href or content, not both.</xsl:text>
        </xsl:message>
      </xsl:when>
      <xsl:when test="@href">
        <xsl:text>    newContext("</xsl:text>
        <xsl:value-of select="@href"/>
        <xsl:text>"</xsl:text>
        <xsl:if test="@catalog">
          <xsl:text>, new CatalogResolver(cm)</xsl:text>
        </xsl:if>
        <xsl:text>);&#xA;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="@catalog">
          <xsl:text>    newContext("</xsl:text>
          <xsl:value-of select="../@name"/>
          <xsl:text>", new CatalogResolver(cm));&#xA;</xsl:text>
        </xsl:if>
        <xsl:text>    context().setDocument("</xsl:text>
        <xsl:apply-templates mode="copy"/>
        <xsl:text>");&#xA;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="test">
    <xsl:text>&#xA;  public void test</xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>() throws Exception {&#xA;</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>  }&#xA;</xsl:text>
  </xsl:template>


  <xsl:template match="document">
    <xsl:choose>
      <xsl:when test="@href and node()">
        <xsl:message terminate="yes">
          <xsl:value-of select="local-name()"/>
          <xsl:text> element should have either @href or content, not both.</xsl:text>
        </xsl:message>
      </xsl:when>
      <xsl:when test="@href">
        <xsl:text>    context().setDocument(new File("</xsl:text>
        <xsl:value-of select="@href"/>
        <xsl:text>"));&#xA;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    context().setDocument("</xsl:text>
        <xsl:apply-templates mode="copy"/>
        <xsl:text>");&#xA;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="@select">
      <xsl:text>    context().setCurrentNode(xpath("</xsl:text>
      <xsl:value-of select="@select"/>
      <xsl:text>"));&#xA;</xsl:text>
    </xsl:if>
  </xsl:template>

  <xsl:template match="param | with-param | variable">
    <xsl:text>    context().set</xsl:text>
    <xsl:choose>
      <xsl:when test="local-name() = 'variable'">
        <xsl:text>GlobalVariable</xsl:text>
      </xsl:when>
      <xsl:when test="local-name() = 'param'">
        <xsl:text>GlobalParam</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>TemplateParam</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>Value("</xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>", </xsl:text>
    <xsl:choose>
      <xsl:when test="@select and node()">
        <xsl:message terminate="yes">
          <xsl:value-of select="local-name()"/>
          <xsl:text> element should have either @select or content, not both.</xsl:text>
        </xsl:message>
      </xsl:when>
      <xsl:when test="@select">
        <xsl:text>xpath("</xsl:text>
        <xsl:value-of select="@select"/>
        <xsl:text>")</xsl:text>
      </xsl:when>
      <xsl:when test="count(node()) = 1 and count(text()) = 1">
        <xsl:text>"</xsl:text>
        <xsl:value-of select="text()"/>
        <xsl:text>"</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>DOMUtil.parse("</xsl:text>
        <xsl:apply-templates mode="copy"/>
        <xsl:text>")</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>);&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="apply-templates">
    <xsl:apply-templates/>
    <xsl:text>    </xsl:text>
    <xsl:if test="not(preceding-sibling::apply-templates or
                      preceding-sibling::call-template)">
      <xsl:text>Node </xsl:text>
    </xsl:if>
    <xsl:text>result = applyTemplates(</xsl:text>
    <xsl:if test="@select">
      <xsl:text>xpath("</xsl:text>
      <xsl:value-of select="@select"/>
      <xsl:text>")</xsl:text>
    </xsl:if>
    <xsl:if test="@mode">
      <xsl:if test="@select">
        <xsl:text>, </xsl:text>
      </xsl:if>
      <xsl:text>"</xsl:text>
      <xsl:value-of select="@mode"/>
      <xsl:text>"</xsl:text>
    </xsl:if>
    <xsl:text>);&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="call-template">
    <xsl:apply-templates/>
    <xsl:text>    Node result = callTemplate("</xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>");&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="assert-equals">
    <xsl:choose>
      <xsl:when test="expected/@href and expected/node()">
        <xsl:message terminate="yes">
          <xsl:value-of select="local-name(expected)"/>
          <xsl:text> element should have either @href or content, not both.</xsl:text>
        </xsl:message>
      </xsl:when>
      <xsl:when test="actual/@href and actual/node()">
        <xsl:message terminate="yes">
          <xsl:value-of select="local-name(actual)"/>
          <xsl:text> element should have either @href or content, not both.</xsl:text>
        </xsl:message>
      </xsl:when>
      <xsl:when test="actual/@select">
        <xsl:text>    xpathAssert("</xsl:text>
        <xsl:value-of select="actual/@select"/>
        <xsl:text>", </xsl:text>
        <xsl:choose>
          <xsl:when test="normalize-space(expected/@select) = 'true()'">
            <xsl:text>true</xsl:text>
          </xsl:when>
          <xsl:when test="normalize-space(expected/@select) = 'false()'">
            <xsl:text>false</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>"</xsl:text>
            <xsl:apply-templates select="expected/node()" mode="copy"/>
            <xsl:text>"</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="actual/@normalize">
          <xsl:text>, </xsl:text>
          <xsl:choose>
            <xsl:when test="normalize-space(actual/@normalize) = 'yes'">
              <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:when test="normalize-space(actual/@normalize) = 'no'">
              <xsl:text>false</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:message terminate="yes">
                <xsl:value-of select="local-name()"/>
                <xsl:text>/@normalize value should be 'yes' or 'no'.  Found '</xsl:text>
                <xsl:value-of select="@normalize"/>
                <xsl:text>'</xsl:text>
              </xsl:message>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:text>).eval(result);&#xA;</xsl:text>
      </xsl:when>
      <xsl:when test="expected/@href">
        <xsl:text>    assertXMLEquals(javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("</xsl:text>
        <xsl:value-of select="expected/@href"/>
        <xsl:text>")), result);&#xA;</xsl:text>
      </xsl:when>
      <xsl:when test="count(expected/node()) = 1 and count(expected/text()) = 1">
        <xsl:text>    assertEquals("</xsl:text>
        <xsl:apply-templates select="expected/node()" mode="copy"/>
        <xsl:text>", DOMUtil.innerText(result));&#xA;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>    assertXMLEquals("</xsl:text>
        <xsl:apply-templates select="expected/node()" mode="copy"/>
        <xsl:text>", result);&#xA;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="assert-error">
    <xsl:text>    try {&#xA;</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>      fail("An exception expected");
    } catch (Throwable t) {
    }&#xA;</xsl:text>
  </xsl:template>

  <!-- 'copy' mode for copying nodes to the result tree. -->
  <xsl:template match="*" mode="copy">
    <xsl:text>&lt;</xsl:text>
    <xsl:value-of select="local-name()"/>
    <xsl:apply-templates select="@*" mode="copy"/>
    <xsl:for-each select="namespace::*[. != 'http://www.w3.org/XML/1998/namespace']">
      <xsl:text> xmlns</xsl:text>
      <xsl:if test="local-name()">
        <xsl:text>:</xsl:text>
        <xsl:value-of select="local-name()"/>
      </xsl:if>
      <xsl:text>='</xsl:text>
      <xsl:value-of select="."/>
      <xsl:text>'</xsl:text>
    </xsl:for-each>
    <xsl:text>></xsl:text>
    <xsl:apply-templates select="node()" mode="copy"/>
    <xsl:text>&lt;/</xsl:text>
    <xsl:value-of select="local-name()"/>
    <xsl:text>></xsl:text>
  </xsl:template>

  <xsl:template match="@*" mode="copy">
    <xsl:text> </xsl:text>
    <xsl:value-of select="local-name()"/>
    <xsl:text>='</xsl:text>
    <xsl:value-of select="."/>
    <xsl:text>'</xsl:text>
  </xsl:template>

  <xsl:template match="text()" mode="copy" name="copy-text">
    <xsl:param name="text" select="."/>
    <xsl:choose>
      <xsl:when test="contains($text, '&#xA;')">
        <xsl:value-of select="substring-before($text, '&#xA;')"/>
        <xsl:text>" +&#xA;      "</xsl:text>
        <xsl:call-template name="copy-text">
          <xsl:with-param name="text"
            select="substring-after($text, '&#xA;')"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="comment()" mode="copy">
    <xsl:text>&lt;!--</xsl:text>
    <xsl:value-of select="."/>
    <xsl:text>--></xsl:text>
  </xsl:template>

</xsl:stylesheet>
