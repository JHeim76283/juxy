apply plugin: 'maven'
apply plugin: 'signing'

signing {
    required = { gradle.taskGraph.allTasks.any { it.name.contains("uploadArchives") } }
    sign configurations.archives
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

ext.pom = pom {
    project {
        packaging 'jar'
        name 'juxy'
        description 'Juxy is a library for unit testing XSLT stylesheets from Java using JUnit.'
        url 'https://github.com/teetrinkers/juxy'

        scm {
           url 'https://github.com/teetrinkers/juxy'
           connection 'scm:git:git@github.com:teetrinkers/juxy.git'
           developerConnection 'scm:git:git@github.com:teetrinkers/juxy.git'
        }

        licenses {
           license {
               name 'The Apache Software License, Version 2.0'
               url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
               distribution 'repo'
           }
        }

        developers {
           developer {
               id 'pavelsher'
               name 'Pavel Sher'
           }
           developer {
               id 'menteith'
               name 'Tony Graham'
           }
           developer {
               id 'sweetcharade'
               name 'Jaebin Lee'
           }
           developer {
               id 'teetrinkers'
               name 'Jens Theess'
           }
        }
    }
}

configure(install.repositories.mavenInstaller) {
    pom = project.pom
}

// Deploy to maven repo.
if (project.hasProperty('sonatypeUsername')) {
    uploadArchives {
        repositories.mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom = project.pom

            pom.scopeMappings.mappings.clear()
            pom.scopeMappings.addMapping(300, configurations.publishCompile, Conf2ScopeMappingContainer.COMPILE)

            // Mess with the generated pom to set the 'packaging' tag.
            pom.withXml { XmlProvider xmlProvider ->
               def xml = xmlProvider.asString()
               def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

               pomXml.version[0] + { packaging('jar') }

               def newXml = new StringWriter()
               def printer = new XmlNodePrinter(new PrintWriter(newXml))
               printer.preserveWhitespace = true
               printer.print(pomXml)
               xml.setLength(0)
               xml.append(newXml.toString())
            }

        } // mavenDeployer
    }
}
